https://kipalog.com/posts/Cau-hinh-nginx-co-ban---Phan-5
================================================================================
================================================================================
https://viblo.asia/p/buoc-dau-lam-quen-voi-vagrant-1VgZvxaM5Aw
load balance với nginx
upstream rails_lb {
  server 127.0.0.1:8084 weight=4;
  server 127.0.0.1:8085 weight=2;
}
================================================================================
================================================================================
https://viblo.asia/p/su-dung-nginx-lam-load-balancer-cho-nhieu-backend-server-gDVK2aJ25Lj
========================================
========================================
Lựa chọn thuật toán cân bằng tải
round-robin, least_conn, least_time, ip_hash
====================
====================
round-robin
Các request lần lượt được đẩy về 2 server backend1 và backend2 theo tỉ lệ dựa trên server weights
Đây là 1:1
upstream backend {
  server backend1;
  server backend2;
}

Hoặc có thể đánh trọng số (weight) cho các server
Server có trọng số weight lớn sẽ được ưu tiên xử lý các request
Với ví dụ bên dưới server backend1 sẽ nhận lượng request gấp đôi server backend2
upstream backend {
  server backend1 weight=4;
  server backend2 weight=2;
}
====================
====================
least_conn
Sử dụng phương pháp này
load balancer sẽ điều hướng request tới server có ít active connection nhất
Config như sau
upstream backend {
  least_conn;
  server backend1;
  server backend2;
}
========================================
========================================
Bảo toàn session người dùng
Hãy thử tưởng tượng bạn có một ứng dụng yêu cầu đăng nhập
Nếu khi đăng nhập
Session lưu trên Backend 1
Sau một hồi request lại được chuyển tới Backend 2
Trạng thái đăng nhập bị mất
Hẳn là người dùng sẽ vô cùng nản

Để giải quyết vấn đề này
Chúng ta có thể lưu session vào memcached hoặc redis
Tất nhiên việc cài cắm thêm 1 thứ gì đó lên server thì không phải ai cũng thích
Hơn nữa nếu có nhiều hơn 2 server memcached hoặc redis
Bạn sẽ cần cấu hình Replicate cho các server này
Bài toán đồng bộ hóa session giữa 2 server memcached hoặc redis diễn ra quá chậm
Bị ảnh hưởng bởi yếu tố Network, I/O

Nhanh gọn hơn NGINX có cung cấp sticky directive
Giúp NGINX tracks user sessions và đưa họ tới đúng upstream server
Tham khảo: https://www.nginx.com/products/session-persistence/
Tuy nhiên
Vấn đề ở chỗ NGINX chỉ cung cấp giải pháp này cho phiên bản thương mại: NGINX Plus
Mà chúng ta chỉ cần bỏ cỡ 2500$ ra mua là xong
====================
====================
Theo một hướng khác, tại sao ta ko dùng ip_hash làm phương thức cân bằng tải
+ Hash được sinh từ 3 chỉ số đầu của một IP, do đó tất cả IP trong cùng C-class network sẽ đc điều hướng tới cùng một backend
+ Tất cả user phía sau một NAT sẽ truy cập vào cùng một backend
+ Nếu ta thêm mới một backend, toàn bộ hash sẽ thay đổi, đương nhiên session sẽ mất

Sau khi tham khảo nhiều giải pháp thì mình tìm được hướng giải quyết hơi tù như sau
upstream backend {
  server backend1;
  server backend2;
}
map $cookie_backend $sticky_backend {
  backend1 backend1;
  backend2 backend2;
  default backend;
}
server {
  listen 80;
  server_name localhost;
  location / {
    set $target http://$sticky_backend;
    proxy_pass $target;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}
+ proxy_pass: thông báo cho nginx biết địa chỉ của backend cần gửi yêu cầu truy cập tới
              giá trị truyền vào có thể là IP Address, Alias, Domain name
+ proxy_set_header Host: Dòng này rất quan trọng
                         bởi khi đi qua reverse proxy
                         nếu giá trị $host empty (không được set)
                         Nginx ở Backend sẽ không thể nhận diện request từ virtual host nào
                         để mà đưa ra xử lý request
+ proxy_set_header X-Real-IP: Set IP của request client vào header khi gửi request vào backend
+ proxy_set_header X-Forwarded-Proto: Cho backend biết giao thức mà client gửi request tới Proxy
                                      http hay https
Step 1: Khi user lần đầu tiên truy cập vào Master server
        lúc đó sẽ ko có backend cookie nào được đưa ra
        và dĩ nhiên $sticky_backend NGINX variable sẽ được chuyển hướng tới upstream group
        Trong trường hợp này
        request sẽ được chuyển tới Backend 1 hoặc Backend 2 theo phương thức round robin
Step 2: Trên các webserver Backend 1 và Backend 2
        ta cấu hình ghi các cookie tương ứng với mỗi request đến:
server {
  listen 80 default_server;
  ...
  location ~ ^/.+\.php(/|$) {
    add_header Set-Cookie "backend=backend1;Max-Age=3600";
    ...
  }
}
server {
  listen 80 default_server;
  ...
  location ~ ^/.+\.php(/|$) {
    add_header Set-Cookie "backend=backend2;Max-Age=3600";
    ...
  }
}
Dễ thấy nếu request được pass vào backend nào
Thì trên client của user sẽ ghi một cookie có name=backend & value=backend1 or backend2 tương ứng
Step 3: Mỗi khi user request lại tới Master
        NGINX sẽ thực hiện map $cookie_backend với $sticky_backend tương ứng
        Và chuyển hướng người dùng vào server đó qua proxy_pass

Không biết cách này có tốt không nhưng ở mức độ demo thì vẫn tạm ổn
Nếu chẳng may server tương ứng với cookie lăn ra chết thì session vẫn ra đi mãi mãi

Hiện tại mình đang set cookie valid trong khoảng thời gian 1h
Nếu qua 1h thì cookie sẽ hết hạn và người dùng có thể bị chuyển qua server khác
Nếu muốn chắc chắn hơn ta có thể bổ sung thêm 1 lớp check với IP address ở phía sau cookie check
========================================
========================================
Health checks
Health checks (Giống kiểm tra sức khỏe vậy)
Là thực liên tục việc kiểm tra các server trên upstream được khai báo trong config của bạn
để tránh việc điều hướng các request của người dùng vào các server không hoạt động
Tóm lại là việc này nhằm đảm bảo người dùng không nhìn thấy các page thông báo lỗi
Khi chúng ta tắt đi 1 server nào đó
Hoặc server nào đó đột xuất bị lỗi không hoạt động
max_fails: Số lần kết nối không thành công trong một khoảng thời gian nhất định tới backend server
           Giá trị mặc định là 0 (disabled heath checks)
fail_timeout: Khoảng thời gian xảy ra số lượng max_fails kết nối không thành công
              Giá trị mặc định là 10
Khi có 1 server backend bị fail
nginx master sẽ điều hướng toàn bộ các traffic sang lần lượt các backend còn lại
upstream backend {
  server backend1 max_fails=3 fail_timeout=10s;
  server backend2 max_fails=3 fail_timeout=10s;
}
====================
====================
Quay lại mục [Bảo toàn session người dùng]
Việc điều hướng tới server nào đang nắm giữ session dựa vào $sticky_backend
Tuy nhiên nếu $sticky_backend=backend1 mà server backend 1 ra đi thì sao
Lúc này ta buộc phải chuyển hướng các user ở backend 1 sang các server backend còn lại

Ở đây mình trigger event set lại $sticky_backend sang server khác
khi có lỗi Gateway Time-out xảy ra trên proxy server
upstream backend {
    server backend1;
    server backend2;
}
...
server {
    listen 80;
    server_name localhost;
    location / {
        set $target http://$sticky_backend;
        proxy_pass $target;
        ...
        # 504 Gateway Time-out
        error_page 504 = @backend_down;
    }

    location @backend_down {
      proxy_pass http://backend;
    }
}
PS: Nếu có $ thì có thể dùng add-on health checks của Nginx Plus
https://www.nginx.com/products/application-health-checks/
================================================================================
================================================================================
Nginx Load Balancer Setup
https://www.youtube.com/watch?v=XdHrywooTi0
========================================
========================================
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "server02"
  config.vm.network "public_network", ip: "192.168.1.102"

  config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", "1024"]
  end
end
================================================================================
================================================================================
vagrant up
vagrant ssh-config

rm -f /c/Users/User/.ssh/known_hosts

cp /c/Users/User/.ssh/id_rsa D:/Vagrant/loadbalancer/.vagrant/machines/default/virtualbox/private_key
ssh -i D:/Vagrant/loadbalancer/.vagrant/machines/default/virtualbox/private_key vagrant@127.0.0.1 -p 2222
cp /c/Users/User/.ssh/id_rsa D:/Vagrant/server01/.vagrant/machines/default/virtualbox/private_key
ssh -i D:/Vagrant/server01/.vagrant/machines/default/virtualbox/private_key vagrant@127.0.0.1 -p 2222
cp /c/Users/User/.ssh/id_rsa D:/Vagrant/server02/.vagrant/machines/default/virtualbox/private_key
ssh -i D:/Vagrant/server02/.vagrant/machines/default/virtualbox/private_key vagrant@127.0.0.1 -p 2222
========================================
========================================
ping 192.168.1.100
ping 192.168.1.101
ping 192.168.1.102
========================================
========================================
vagrant ssh
====================
====================
loadbalancer
sudo apt-get update
sudo apt-get install -y nginx
sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup
sudo vim /etc/nginx/nginx.conf
dG
a
worker_processes 1;
events {
  worker_connections 1024;
}

http {
  upstream servers {
    server 192.168.1.101:8081;
    server 192.168.1.102:8082;
  }

  server {
    listen 8080;

    location / {
      proxy_pass http://servers;
    }
  }
}
Esc
:qw
sudo cat /etc/nginx/nginx.conf
sudo service nginx restart
====================
====================
server01
server02
sudo apt-get update
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.9/install.sh | bash
source ~/.bashrc
nvm install 9.11.1
npm install -g http-server
mkdir www && cd $_ && echo '<h1>111</h1>' > index.html && http-server -p 8081
mkdir www && cd $_ && echo '<h1>222</h1>' > index.html && http-server -p 8082
========================================
========================================
curl 192.168.1.101:8081
curl 192.168.1.102:8082
curl 192.168.1.100:8080
curl 192.168.1.100:8080
curl 192.168.1.100:8080
================================================================================
================================================================================
http://www.thisprogrammingthing.com/2015/multiple-vagrant-vms-in-one-vagrantfile/
================================================================================
================================================================================
https://stackoverflow.com/questions/45995530/manpath-cant-set-the-locale-make-sure-lc-and-lang-are-correct
https://gist.github.com/SimonSun1988/2ef7db45e46b889783647d941ec15e4d

manpath: can't set the locale; make sure $LC_* and $LANG are correct
========================================
========================================
sudo locale-gen "en_US.UTF-8"
sudo dpkg-reconfigure locales
sudo vim /etc/default/locale
a
LC_ALL="en_US.UTF-8"
Esc
:wq
sudo cat /etc/default/locale
exit
vagrant reload
================================================================================
================================================================================
http://echip.com.vn/xay-dung-mang-ao--phan-1-mang-may-tinh-ao-tiep-theo-a20130406071049381-c1110.html
Use bridged connection: cho phép card mạng máy ảo kết nối trực tiếp với card mạng máy thật, giống như khi chúng được kết nối vào chung một switch. Khi đó, địa chỉ IP của máy ảo phải nằm cùng subnet với địa chỉ IP mà card mạng máy thật đang dùng. Đây là lựa chọn thường được sử dụng nhiều nhất khi tạo một mạng máy tính ảo.
Use network address translation (NAT): máy ảo sẽ nằm ở một vùng địa chỉ IP khác và phải thực hiện việc kỹ thuật chuyển đổi địa chỉ (NAT) khi liên lạc với máy tính bên ngoài.
Use host-only networking: máy tính ảo sẽ kết nối với máy tính thật bằng một vùng mạng riêng, nhưng không liên lạc được với bên ngoài.
================================================================================
================================================================================
Cài đặt Vagrant & VirtualBox trên Windows 10
https://www.youtube.com/watch?v=WNsso7zsUHE

Sử dụng Vagrant cài đặt Ubuntu Server
https://www.youtube.com/watch?v=9exu9NHMtNw&list=PLzsF36Xh2Cq1HQIdocIqcZHxuobqqik2L&index=2

CÀI ĐẶT UBUNTU SERVER VỚI VAGRANT
https://sonnguyen.ws/vi/cai-dat-ubuntu-server-voi-vagrant/
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  #config.vm.synced_folder "./", "/build/"
  config.vm.hostname = "dev-server"
  config.vm.network "private_network", ip: "172.20.20.20"

  config.vm.provider "virtualbox" do |vb|
    vb.gui = false
    vb.memory = 2048
    vb.cpus = 1
  end
  config.vm.provision "shell", inline: <<-SHELL
     sudo apt-get update
     sudo apt-get install -y whois git
     sudo useradd -m -p `mkpasswd password` -s /bin/bash dev
     sudo usermod -a -G sudo dev
  SHELL
end
================================================================================
================================================================================
Hướng dẫn tạo máy ảo với Vagrant + VirtualBox
https://www.youtube.com/watch?v=s30E7ssEQWI

https://thachpham.com/tools/tao-may-ao-tren-may-tinh-voi-vagrant-va-virtualbox.html
Một số lệnh Vagrant cơ bản cần thiết
Trong khi dùng Vagrant, có thể bạn sẽ sử dụng rất nhiều một số lệnh dưới đây nên tốt nhất là hãy nhớ chức năng của nó:
vagrant box add – Nạp box.
vagrant box list – Xem danh sách các box.
vagrant box remove NAME

vagrant up
vagrant suspend – Cho máy ảo tạm nghỉ.
vagrant halt – Cho máy ảo đi ngủ, shutdown đó.
vagrant destroy – Cho máy ảo về vườn.
vagrant reload – Tải lại các thiết lập trong file Vagrantfile của máy ảo, khi đổi nội dung file đó, sử dụng lệnh reload này để nạp lại cấu hình.

vagrant ssh
vagrant login – Đăng nhập vào hệ thống Vagrant Cloud.
vagrant share --ssh: Chia sẻ máy ảo của bạn cho người khác truy cập, bạn phải gõ lệnh vagrant login trước khi dùng tính năng này.
================================================================================
================================================================================
$ git add .
warning: LF will be replaced by CRLF in README.md.
The file will have its original line endings in your working directory.

https://stackoverflow.com/questions/17628305/windows-git-warning-lf-will-be-replaced-by-crlf-is-that-warning-tail-backwar/17628353
git config --global core.autocrlf false
================================================================================
================================================================================
mkdir vgserver
cd vgserver
====================
====================
https://app.vagrantup.com/ubuntu/boxes/trusty64
vagrant box add ubuntu/trusty64
vagrant init ubuntu/trusty64
====================
====================
https://app.vagrantup.com/ubuntu/boxes/xenial64
vagrant box add ubuntu/xenial64
vagrant init ubuntu/xenial64
========================================
========================================
Vagrantfile
# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VESION = "2"
HOST_NAME = "loadbalancer"
HOST_IP = "192.168.1.200"

Vagrant.configure(VAGRANTFILE_API_VESION) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = HOST_NAME
  config.vm.network "public_network", ip: HOST_IP

  config.vm.provider "virtualbox" do |vb|
    vb.gui = false
    vb.memory = 1024
    vb.cpus = 1
  end
end
========================================
========================================
mkdir loadbalancer
mkdir server01
mkdir server02
========================================
========================================
vagrant up
vagrant status
vagrant ssh
user: vagrant
password: vagrant
====================
====================
How to Set up Virtual Box and Vagrant on Windows
https://www.youtube.com/watch?v=mPBWWu7sZU4
vagrant ssh-config
Host default
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile D:/Vagrant/loadbalancer/.vagrant/machines/default/virtualbox/private_key
  IdentitiesOnly yes
  LogLevel FATAL

ssh vagrant@127.0.0.1 -p 2222 -i D:/Vagrant/loadbalancer/.vagrant/machines/default/virtualbox/private_key
Permission denied (publickey).
It is happen on Ubuntu 16.04 LTS (Xenial Xerus) ubuntu/xenial64
Using ubuntu/trusty64 instead of ubuntu/xenial64

vagrant halt
vagrant destroy
====================
====================
ping
sudo apt-get update
========================================
========================================
loadbalancer
sudo apt-get install -y nginx
====================
====================
server01
server02
sudo apt-get install -y nodejs npm
====================
====================
loadbalancer
ls -al /etc/nginx/nginx.conf
sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup
sudo vim /etc/nginx/nginx.conf
worker_processes 1;
events {
  worker_connections 1024;
}

http {
  upstream servers {
    server 192.168.1.101:8081;
    server 192.168.1.102:8082;
  }

  server {
    listen 8080;

    location / {
      proxy_pass http://servers;
    }
  }
}

sudo cat /etc/nginx/nginx.conf
sudo service nginx restart
==========
==========
https://codeyarns.com/2011/04/18/how-to-delete-all-lines-of-file-in-vim/
https://stackoverflow.com/questions/11828270/how-to-exit-the-vim-editor
Type gg to move the cursor to the first line of the file, if it is not already there.
Type dG to delete all the lines.
:wq to write and quit
gg
dG
Esc > :wq
====================
====================
server01
server02
sudo ln -s /usr/bin/nodejs /usr/bin/node
sudo npm install -g http-server
==========
==========
npm http GET https://registry.npmjs.org/http-server
npm http GET https://registry.npmjs.org/http-server
npm http GET https://registry.npmjs.org/http-server
npm ERR! Error: CERT_UNTRUSTED
npm ERR!     at SecurePair.<anonymous> (tls.js:1370:32)
npm ERR!     at SecurePair.EventEmitter.emit (events.js:92:17)
npm ERR!     at SecurePair.maybeInitFinished (tls.js:982:10)
npm ERR!     at CleartextStream.read [as _read] (tls.js:469:13)
npm ERR!     at CleartextStream.Readable.read (_stream_readable.js:320:10)
npm ERR!     at EncryptedStream.write [as _write] (tls.js:366:25)
npm ERR!     at doWrite (_stream_writable.js:223:10)
npm ERR!     at writeOrBuffer (_stream_writable.js:213:5)
npm ERR!     at EncryptedStream.Writable.write (_stream_writable.js:180:11)
npm ERR!     at write (_stream_readable.js:583:24)
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Linux 3.13.0-144-generic
npm ERR! command "/usr/bin/nodejs" "/usr/bin/npm" "install" "-g" "http-server"
npm ERR! cwd /home/vagrant
npm ERR! node -v v0.10.25
npm ERR! npm -v 1.3.10
npm ERR!
npm ERR! Additional logging details can be found in:
npm ERR!     /home/vagrant/npm-debug.log
npm ERR! not ok code 0

https://github.com/npm/npm/issues/20203
before_install:
  - "npm config set strict-ssl false"

sudo npm config set strict-ssl false
sudo npm install -g http-server
==========
==========
ls -al /vagrant/www
cd /vagrant/www
ls
index.html
sudo http-server -p 80
==========
==========
sudo http-server -p 80
/usr/local/lib/node_modules/http-server/node_modules/ecstatic/lib/ecstatic.js:5
const path = require('path');
^^^^^
SyntaxError: Use of const in strict mode.
    at Module._compile (module.js:439:25)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.require (module.js:364:17)
    at require (module.js:380:17)
    at Object.<anonymous> (/usr/local/lib/node_modules/http-server/lib/http-server.js:5:16)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)

sudo npm uninstall -g http-server
sudo rm -rf /usr/bin/node
sudo apt-get remove --purge nodejs npm
====================
====================
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.9/install.sh | bash
source ~/.bashrc
nvm --version
nvm install 9.11.1
node -v
npm -v
npm install -g http-server
http-server -p 80
==========
==========
http-server -p 80
events.js:165
      throw er; // Unhandled 'error' event
      ^

Error: listen EACCES 0.0.0.0:80
    at Server.setupListenHandle [as _listen2] (net.js:1329:19)
    at listenInCluster (net.js:1387:12)
    at doListen (net.js:1502:7)
    at process._tickCallback (internal/process/next_tick.js:178:19)
    at Function.Module.runMain (internal/modules/cjs/loader.js:697:11)
    at startup (internal/bootstrap/node.js:201:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:516:3)
Emitted 'error' event at:
    at emitErrorNT (net.js:1366:8)
    at process._tickCallback (internal/process/next_tick.js:178:19)
    [... lines matching original stack trace ...]
    at bootstrapNodeJSCore (internal/bootstrap/node.js:516:3)

http-server -p 8080
====================
====================
curl 192.168.1.101
curl 192.168.1.102
curl 192.168.1.100
curl 192.168.1.100
curl 192.168.1.100
========================================
========================================
================================================================================
================================================================================
NOTOK
vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==> default: Importing base box 'ubuntu/trusty64'...
==> default: Matching MAC address for NAT networking...
==> default: Checking if box 'ubuntu/trusty64' is up to date...
==> default: Setting the name of the VM: server02_default_1524390197913_8514
==> default: Clearing any previously set forwarded ports...
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
    default: Adapter 2: bridged
==> default: Forwarding ports...
    default: 8082 (guest) => 8082 (host) (adapter 1)
    default: 22 (guest) => 2222 (host) (adapter 1)
==> default: Running 'pre-boot' VM customizations...
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: password
    default:
    default: Inserting generated public key within guest...
    default: Removing insecure key from the guest if its present...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
    default: Warning: Remote connection disconnect. Retrying...
    default: Warning: Remote connection disconnect. Retrying...
    default: Warning: Remote connection disconnect. Retrying...
    default: Warning: Remote connection disconnect. Retrying...
    default: Warning: Remote connection disconnect. Retrying...
========================================
========================================
OK
vagrant reload
==> default: Checking if box 'ubuntu/trusty64' is up to date...
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
    default: Adapter 2: bridged
==> default: Forwarding ports...
    default: 8082 (guest) => 8082 (host) (adapter 1)
    default: 22 (guest) => 2222 (host) (adapter 1)
==> default: Running 'pre-boot' VM customizations...
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: password
==> default: Machine booted and ready!
==> default: Checking for guest additions in VM...
    default: The guest additions on this VM do not match the installed version of
    default: VirtualBox! In most cases this is fine, but in rare cases it can
    default: prevent things such as shared folders from working properly. If you see
    default: shared folder errors, please make sure the guest additions within the
    default: virtual machine match the version of VirtualBox you have installed on
    default: your host and reload your VM.
    default:
    default: Guest Additions Version: 4.3.36
    default: VirtualBox Version: 5.2
==> default: Setting hostname...
==> default: Configuring and enabling network interfaces...
==> default: Mounting shared folders...
    default: /vagrant => D:/Vagrant/server02
==> default: Machine already provisioned. Run `vagrant provision` or use the `--provision`
==> default: flag to force provisioning. Provisioners marked to run always will still run.
========================================
========================================
Vagrantfile
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "server02"
  config.vm.network :public_network, ip: "192.168.1.102"
  config.ssh.password = "vagrant"

  config.vm.provider "virtualbox" do |vb|
    vb.memory = 512
    vb.cpus = 1
  end
end
====================
====================
vagrant ssh-config
Host default
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile C:/Users/User/.ssh/id_rsa
  IdentitiesOnly yes
  LogLevel FATAL
====================
====================
ssh vagrant@127.0.0.1 -p 2222 -i D:/Vagrant/server02/.vagrant/machines/default/virtualbox/private_key
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
SHA256:Ppuu2rwAgNRgYbkHSH9hzsrGEkp4pIl0MgDnStxZCbQ.
Please contact your system administrator.
Add correct host key in /c/Users/User/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /c/Users/User/.ssh/known_hosts:6
ECDSA host key for [127.0.0.1]:2222 has changed and you have requested strict checking.
Host key verification failed.
====================
====================
rm -f /c/Users/User/.ssh/known_hosts
cp /c/Users/User/.ssh/id_rsa D:/Vagrant/server02/.vagrant/machines/default/virtualbox/private_key
cp: cannot create regular file 'D:/Vagrant/server02/.vagrant/machines/default/virtualbox/private_key': Permission denied

Properties > Security > Edit > Add
users > Check names > OK
Allow: Full control
====================
====================
ssh vagrant@127.0.0.1 -p 2222 -i D:/Vagrant/server02/.vagrant/machines/default/virtualbox/private_key
The authenticity of host '[127.0.0.1]:2222 ([127.0.0.1]:2222)' cant be established.
ECDSA key fingerprint is SHA256:Ppuu2rwAgNRgYbkHSH9hzsrGEkp4pIl0MgDnStxZCbQ.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[127.0.0.1]:2222' (ECDSA) to the list of known hosts.
Load key "D:/Vagrant/server02/.vagrant/machines/default/virtualbox/private_key": Permission denied
vagrant@127.0.0.1s password:
Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-144-generic x86_64)
================================================================================
================================================================================
